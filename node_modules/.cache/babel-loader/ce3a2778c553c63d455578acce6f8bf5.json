{"ast":null,"code":"var url = require(\"url\");\n\nvar URL = url.URL;\n\nvar http = require(\"http\");\n\nvar https = require(\"https\");\n\nvar Writable = require(\"stream\").Writable;\n\nvar assert = require(\"assert\");\n\nvar debug = require(\"./debug\"); // Create handlers that pass events from native requests\n\n\nvar eventHandlers = Object.create(null);\n[\"abort\", \"aborted\", \"connect\", \"error\", \"socket\", \"timeout\"].forEach(function (event) {\n  eventHandlers[event] = function (arg1, arg2, arg3) {\n    this._redirectable.emit(event, arg1, arg2, arg3);\n  };\n}); // Error types with codes\n\nvar RedirectionError = createErrorType(\"ERR_FR_REDIRECTION_FAILURE\", \"\");\nvar TooManyRedirectsError = createErrorType(\"ERR_FR_TOO_MANY_REDIRECTS\", \"Maximum number of redirects exceeded\");\nvar MaxBodyLengthExceededError = createErrorType(\"ERR_FR_MAX_BODY_LENGTH_EXCEEDED\", \"Request body larger than maxBodyLength limit\");\nvar WriteAfterEndError = createErrorType(\"ERR_STREAM_WRITE_AFTER_END\", \"write after end\"); // An HTTP(S) request that can be redirected\n\nfunction RedirectableRequest(options, responseCallback) {\n  // Initialize the request\n  Writable.call(this);\n\n  this._sanitizeOptions(options);\n\n  this._options = options;\n  this._ended = false;\n  this._ending = false;\n  this._redirectCount = 0;\n  this._redirects = [];\n  this._requestBodyLength = 0;\n  this._requestBodyBuffers = []; // Attach a callback if passed\n\n  if (responseCallback) {\n    this.on(\"response\", responseCallback);\n  } // React to responses of native requests\n\n\n  var self = this;\n\n  this._onNativeResponse = function (response) {\n    self._processResponse(response);\n  }; // Perform the first request\n\n\n  this._performRequest();\n}\n\nRedirectableRequest.prototype = Object.create(Writable.prototype);\n\nRedirectableRequest.prototype.abort = function () {\n  // Abort the internal request\n  this._currentRequest.removeAllListeners();\n\n  this._currentRequest.on(\"error\", noop);\n\n  this._currentRequest.abort(); // Abort this request\n\n\n  this.emit(\"abort\");\n  this.removeAllListeners();\n}; // Writes buffered data to the current native request\n\n\nRedirectableRequest.prototype.write = function (data, encoding, callback) {\n  // Writing is not allowed if end has been called\n  if (this._ending) {\n    throw new WriteAfterEndError();\n  } // Validate input and shift parameters if necessary\n\n\n  if (!(typeof data === \"string\" || typeof data === \"object\" && \"length\" in data)) {\n    throw new TypeError(\"data should be a string, Buffer or Uint8Array\");\n  }\n\n  if (typeof encoding === \"function\") {\n    callback = encoding;\n    encoding = null;\n  } // Ignore empty buffers, since writing them doesn't invoke the callback\n  // https://github.com/nodejs/node/issues/22066\n\n\n  if (data.length === 0) {\n    if (callback) {\n      callback();\n    }\n\n    return;\n  } // Only write when we don't exceed the maximum body length\n\n\n  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {\n    this._requestBodyLength += data.length;\n\n    this._requestBodyBuffers.push({\n      data: data,\n      encoding: encoding\n    });\n\n    this._currentRequest.write(data, encoding, callback);\n  } // Error when we exceed the maximum body length\n  else {\n      this.emit(\"error\", new MaxBodyLengthExceededError());\n      this.abort();\n    }\n}; // Ends the current native request\n\n\nRedirectableRequest.prototype.end = function (data, encoding, callback) {\n  // Shift parameters if necessary\n  if (typeof data === \"function\") {\n    callback = data;\n    data = encoding = null;\n  } else if (typeof encoding === \"function\") {\n    callback = encoding;\n    encoding = null;\n  } // Write data if needed and end\n\n\n  if (!data) {\n    this._ended = this._ending = true;\n\n    this._currentRequest.end(null, null, callback);\n  } else {\n    var self = this;\n    var currentRequest = this._currentRequest;\n    this.write(data, encoding, function () {\n      self._ended = true;\n      currentRequest.end(null, null, callback);\n    });\n    this._ending = true;\n  }\n}; // Sets a header value on the current native request\n\n\nRedirectableRequest.prototype.setHeader = function (name, value) {\n  this._options.headers[name] = value;\n\n  this._currentRequest.setHeader(name, value);\n}; // Clears a header value on the current native request\n\n\nRedirectableRequest.prototype.removeHeader = function (name) {\n  delete this._options.headers[name];\n\n  this._currentRequest.removeHeader(name);\n}; // Global timeout for all underlying requests\n\n\nRedirectableRequest.prototype.setTimeout = function (msecs, callback) {\n  var self = this;\n\n  if (callback) {\n    this.on(\"timeout\", callback);\n  } // Sets up a timer to trigger a timeout event\n\n\n  function startTimer() {\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n    }\n\n    self._timeout = setTimeout(function () {\n      self.emit(\"timeout\");\n      clearTimer();\n    }, msecs);\n  } // Prevent a timeout from triggering\n\n\n  function clearTimer() {\n    clearTimeout(this._timeout);\n\n    if (callback) {\n      self.removeListener(\"timeout\", callback);\n    }\n\n    if (!this.socket) {\n      self._currentRequest.removeListener(\"socket\", startTimer);\n    }\n  } // Start the timer when the socket is opened\n\n\n  if (this.socket) {\n    startTimer();\n  } else {\n    this._currentRequest.once(\"socket\", startTimer);\n  }\n\n  this.once(\"response\", clearTimer);\n  this.once(\"error\", clearTimer);\n  return this;\n}; // Proxy all other public ClientRequest methods\n\n\n[\"flushHeaders\", \"getHeader\", \"setNoDelay\", \"setSocketKeepAlive\"].forEach(function (method) {\n  RedirectableRequest.prototype[method] = function (a, b) {\n    return this._currentRequest[method](a, b);\n  };\n}); // Proxy all public ClientRequest properties\n\n[\"aborted\", \"connection\", \"socket\"].forEach(function (property) {\n  Object.defineProperty(RedirectableRequest.prototype, property, {\n    get: function () {\n      return this._currentRequest[property];\n    }\n  });\n});\n\nRedirectableRequest.prototype._sanitizeOptions = function (options) {\n  // Ensure headers are always present\n  if (!options.headers) {\n    options.headers = {};\n  } // Since http.request treats host as an alias of hostname,\n  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n\n\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n\n    delete options.host;\n  } // Complete the URL object when necessary\n\n\n  if (!options.pathname && options.path) {\n    var searchPos = options.path.indexOf(\"?\");\n\n    if (searchPos < 0) {\n      options.pathname = options.path;\n    } else {\n      options.pathname = options.path.substring(0, searchPos);\n      options.search = options.path.substring(searchPos);\n    }\n  }\n}; // Executes the next native request (initial or redirect)\n\n\nRedirectableRequest.prototype._performRequest = function () {\n  // Load the native protocol\n  var protocol = this._options.protocol;\n  var nativeProtocol = this._options.nativeProtocols[protocol];\n\n  if (!nativeProtocol) {\n    this.emit(\"error\", new TypeError(\"Unsupported protocol \" + protocol));\n    return;\n  } // If specified, use the agent corresponding to the protocol\n  // (HTTP and HTTPS use different types of agents)\n\n\n  if (this._options.agents) {\n    var scheme = protocol.substr(0, protocol.length - 1);\n    this._options.agent = this._options.agents[scheme];\n  } // Create the native request\n\n\n  var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);\n  this._currentUrl = url.format(this._options); // Set up event handlers\n\n  request._redirectable = this;\n\n  for (var event in eventHandlers) {\n    /* istanbul ignore else */\n    if (event) {\n      request.on(event, eventHandlers[event]);\n    }\n  } // End a redirected request\n  // (The first request must be ended explicitly with RedirectableRequest#end)\n\n\n  if (this._isRedirect) {\n    // Write the request entity and end.\n    var i = 0;\n    var self = this;\n    var buffers = this._requestBodyBuffers;\n\n    (function writeNext(error) {\n      // Only write if this request has not been redirected yet\n\n      /* istanbul ignore else */\n      if (request === self._currentRequest) {\n        // Report any write errors\n\n        /* istanbul ignore if */\n        if (error) {\n          self.emit(\"error\", error);\n        } // Write the next buffer if there are still left\n        else if (i < buffers.length) {\n            var buffer = buffers[i++];\n            /* istanbul ignore else */\n\n            if (!request.finished) {\n              request.write(buffer.data, buffer.encoding, writeNext);\n            }\n          } // End the request if `end` has been called on us\n          else if (self._ended) {\n              request.end();\n            }\n      }\n    })();\n  }\n}; // Processes a response from the current native request\n\n\nRedirectableRequest.prototype._processResponse = function (response) {\n  // Store the redirected response\n  var statusCode = response.statusCode;\n\n  if (this._options.trackRedirects) {\n    this._redirects.push({\n      url: this._currentUrl,\n      headers: response.headers,\n      statusCode: statusCode\n    });\n  } // RFC7231ยง6.4: The 3xx (Redirection) class of status code indicates\n  // that further action needs to be taken by the user agent in order to\n  // fulfill the request. If a Location header field is provided,\n  // the user agent MAY automatically redirect its request to the URI\n  // referenced by the Location field value,\n  // even if the specific status code is not understood.\n\n\n  var location = response.headers.location;\n\n  if (location && this._options.followRedirects !== false && statusCode >= 300 && statusCode < 400) {\n    // Abort the current request\n    this._currentRequest.removeAllListeners();\n\n    this._currentRequest.on(\"error\", noop);\n\n    this._currentRequest.abort(); // Discard the remainder of the response to avoid waiting for data\n\n\n    response.destroy(); // RFC7231ยง6.4: A client SHOULD detect and intervene\n    // in cyclical redirections (i.e., \"infinite\" redirection loops).\n\n    if (++this._redirectCount > this._options.maxRedirects) {\n      this.emit(\"error\", new TooManyRedirectsError());\n      return;\n    } // RFC7231ยง6.4: Automatic redirection needs to done with\n    // care for methods not known to be safe, [โฆ]\n    // RFC7231ยง6.4.2โ3: For historical reasons, a user agent MAY change\n    // the request method from POST to GET for the subsequent request.\n\n\n    if ((statusCode === 301 || statusCode === 302) && this._options.method === \"POST\" || // RFC7231ยง6.4.4: The 303 (See Other) status code indicates that\n    // the server is redirecting the user agent to a different resource [โฆ]\n    // A user agent can perform a retrieval request targeting that URI\n    // (a GET or HEAD request if using HTTP) [โฆ]\n    statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {\n      this._options.method = \"GET\"; // Drop a possible entity and headers related to it\n\n      this._requestBodyBuffers = [];\n      removeMatchingHeaders(/^content-/i, this._options.headers);\n    } // Drop the Host header, as the redirect might lead to a different host\n\n\n    var previousHostName = removeMatchingHeaders(/^host$/i, this._options.headers) || url.parse(this._currentUrl).hostname; // Create the redirected request\n\n    var redirectUrl = url.resolve(this._currentUrl, location);\n    debug(\"redirecting to\", redirectUrl);\n    this._isRedirect = true;\n    var redirectUrlParts = url.parse(redirectUrl);\n    Object.assign(this._options, redirectUrlParts); // Drop the Authorization header if redirecting to another host\n\n    if (redirectUrlParts.hostname !== previousHostName) {\n      removeMatchingHeaders(/^authorization$/i, this._options.headers);\n    } // Evaluate the beforeRedirect callback\n\n\n    if (typeof this._options.beforeRedirect === \"function\") {\n      var responseDetails = {\n        headers: response.headers\n      };\n\n      try {\n        this._options.beforeRedirect.call(null, this._options, responseDetails);\n      } catch (err) {\n        this.emit(\"error\", err);\n        return;\n      }\n\n      this._sanitizeOptions(this._options);\n    } // Perform the redirected request\n\n\n    try {\n      this._performRequest();\n    } catch (cause) {\n      var error = new RedirectionError(\"Redirected request failed: \" + cause.message);\n      error.cause = cause;\n      this.emit(\"error\", error);\n    }\n  } else {\n    // The response is not a redirect; return it as-is\n    response.responseUrl = this._currentUrl;\n    response.redirects = this._redirects;\n    this.emit(\"response\", response); // Clean up\n\n    this._requestBodyBuffers = [];\n  }\n}; // Wraps the key/value object of protocols with redirect functionality\n\n\nfunction wrap(protocols) {\n  // Default settings\n  var exports = {\n    maxRedirects: 21,\n    maxBodyLength: 10 * 1024 * 1024\n  }; // Wrap each protocol\n\n  var nativeProtocols = {};\n  Object.keys(protocols).forEach(function (scheme) {\n    var protocol = scheme + \":\";\n    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];\n    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol); // Executes a request, following redirects\n\n    function request(input, options, callback) {\n      // Parse parameters\n      if (typeof input === \"string\") {\n        var urlStr = input;\n\n        try {\n          input = urlToOptions(new URL(urlStr));\n        } catch (err) {\n          /* istanbul ignore next */\n          input = url.parse(urlStr);\n        }\n      } else if (URL && input instanceof URL) {\n        input = urlToOptions(input);\n      } else {\n        callback = options;\n        options = input;\n        input = {\n          protocol: protocol\n        };\n      }\n\n      if (typeof options === \"function\") {\n        callback = options;\n        options = null;\n      } // Set defaults\n\n\n      options = Object.assign({\n        maxRedirects: exports.maxRedirects,\n        maxBodyLength: exports.maxBodyLength\n      }, input, options);\n      options.nativeProtocols = nativeProtocols;\n      assert.equal(options.protocol, protocol, \"protocol mismatch\");\n      debug(\"options\", options);\n      return new RedirectableRequest(options, callback);\n    } // Executes a GET request, following redirects\n\n\n    function get(input, options, callback) {\n      var wrappedRequest = wrappedProtocol.request(input, options, callback);\n      wrappedRequest.end();\n      return wrappedRequest;\n    } // Expose the properties on the wrapped protocol\n\n\n    Object.defineProperties(wrappedProtocol, {\n      request: {\n        value: request,\n        configurable: true,\n        enumerable: true,\n        writable: true\n      },\n      get: {\n        value: get,\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }\n    });\n  });\n  return exports;\n}\n/* istanbul ignore next */\n\n\nfunction noop() {\n  /* empty */\n} // from https://github.com/nodejs/node/blob/master/lib/internal/url.js\n\n\nfunction urlToOptions(urlObject) {\n  var options = {\n    protocol: urlObject.protocol,\n    hostname: urlObject.hostname.startsWith(\"[\") ?\n    /* istanbul ignore next */\n    urlObject.hostname.slice(1, -1) : urlObject.hostname,\n    hash: urlObject.hash,\n    search: urlObject.search,\n    pathname: urlObject.pathname,\n    path: urlObject.pathname + urlObject.search,\n    href: urlObject.href\n  };\n\n  if (urlObject.port !== \"\") {\n    options.port = Number(urlObject.port);\n  }\n\n  return options;\n}\n\nfunction removeMatchingHeaders(regex, headers) {\n  var lastValue;\n\n  for (var header in headers) {\n    if (regex.test(header)) {\n      lastValue = headers[header];\n      delete headers[header];\n    }\n  }\n\n  return lastValue;\n}\n\nfunction createErrorType(code, defaultMessage) {\n  function CustomError(message) {\n    Error.captureStackTrace(this, this.constructor);\n    this.message = message || defaultMessage;\n  }\n\n  CustomError.prototype = new Error();\n  CustomError.prototype.constructor = CustomError;\n  CustomError.prototype.name = \"Error [\" + code + \"]\";\n  CustomError.prototype.code = code;\n  return CustomError;\n} // Exports\n\n\nmodule.exports = wrap({\n  http: http,\n  https: https\n});\nmodule.exports.wrap = wrap;","map":{"version":3,"sources":["/var/www/html/Front-end/node_modules/follow-redirects/index.js"],"names":["url","require","URL","http","https","Writable","assert","debug","eventHandlers","Object","create","forEach","event","arg1","arg2","arg3","_redirectable","emit","RedirectionError","createErrorType","TooManyRedirectsError","MaxBodyLengthExceededError","WriteAfterEndError","RedirectableRequest","options","responseCallback","call","_sanitizeOptions","_options","_ended","_ending","_redirectCount","_redirects","_requestBodyLength","_requestBodyBuffers","on","self","_onNativeResponse","response","_processResponse","_performRequest","prototype","abort","_currentRequest","removeAllListeners","noop","write","data","encoding","callback","TypeError","length","maxBodyLength","push","end","currentRequest","setHeader","name","value","headers","removeHeader","setTimeout","msecs","startTimer","_timeout","clearTimeout","clearTimer","removeListener","socket","once","method","a","b","property","defineProperty","get","host","hostname","pathname","path","searchPos","indexOf","substring","search","protocol","nativeProtocol","nativeProtocols","agents","scheme","substr","agent","request","_currentUrl","format","_isRedirect","i","buffers","writeNext","error","buffer","finished","statusCode","trackRedirects","location","followRedirects","destroy","maxRedirects","test","removeMatchingHeaders","previousHostName","parse","redirectUrl","resolve","redirectUrlParts","assign","beforeRedirect","responseDetails","err","cause","message","responseUrl","redirects","wrap","protocols","exports","keys","wrappedProtocol","input","urlStr","urlToOptions","equal","wrappedRequest","defineProperties","configurable","enumerable","writable","urlObject","startsWith","slice","hash","href","port","Number","regex","lastValue","header","code","defaultMessage","CustomError","Error","captureStackTrace","constructor","module"],"mappings":"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","sourcesContent":["var url = require(\"url\");\nvar URL = url.URL;\nvar http = require(\"http\");\nvar https = require(\"https\");\nvar Writable = require(\"stream\").Writable;\nvar assert = require(\"assert\");\nvar debug = require(\"./debug\");\n\n// Create handlers that pass events from native requests\nvar eventHandlers = Object.create(null);\n[\"abort\", \"aborted\", \"connect\", \"error\", \"socket\", \"timeout\"].forEach(function (event) {\n  eventHandlers[event] = function (arg1, arg2, arg3) {\n    this._redirectable.emit(event, arg1, arg2, arg3);\n  };\n});\n\n// Error types with codes\nvar RedirectionError = createErrorType(\n  \"ERR_FR_REDIRECTION_FAILURE\",\n  \"\"\n);\nvar TooManyRedirectsError = createErrorType(\n  \"ERR_FR_TOO_MANY_REDIRECTS\",\n  \"Maximum number of redirects exceeded\"\n);\nvar MaxBodyLengthExceededError = createErrorType(\n  \"ERR_FR_MAX_BODY_LENGTH_EXCEEDED\",\n  \"Request body larger than maxBodyLength limit\"\n);\nvar WriteAfterEndError = createErrorType(\n  \"ERR_STREAM_WRITE_AFTER_END\",\n  \"write after end\"\n);\n\n// An HTTP(S) request that can be redirected\nfunction RedirectableRequest(options, responseCallback) {\n  // Initialize the request\n  Writable.call(this);\n  this._sanitizeOptions(options);\n  this._options = options;\n  this._ended = false;\n  this._ending = false;\n  this._redirectCount = 0;\n  this._redirects = [];\n  this._requestBodyLength = 0;\n  this._requestBodyBuffers = [];\n\n  // Attach a callback if passed\n  if (responseCallback) {\n    this.on(\"response\", responseCallback);\n  }\n\n  // React to responses of native requests\n  var self = this;\n  this._onNativeResponse = function (response) {\n    self._processResponse(response);\n  };\n\n  // Perform the first request\n  this._performRequest();\n}\nRedirectableRequest.prototype = Object.create(Writable.prototype);\n\nRedirectableRequest.prototype.abort = function () {\n  // Abort the internal request\n  this._currentRequest.removeAllListeners();\n  this._currentRequest.on(\"error\", noop);\n  this._currentRequest.abort();\n\n  // Abort this request\n  this.emit(\"abort\");\n  this.removeAllListeners();\n};\n\n// Writes buffered data to the current native request\nRedirectableRequest.prototype.write = function (data, encoding, callback) {\n  // Writing is not allowed if end has been called\n  if (this._ending) {\n    throw new WriteAfterEndError();\n  }\n\n  // Validate input and shift parameters if necessary\n  if (!(typeof data === \"string\" || typeof data === \"object\" && (\"length\" in data))) {\n    throw new TypeError(\"data should be a string, Buffer or Uint8Array\");\n  }\n  if (typeof encoding === \"function\") {\n    callback = encoding;\n    encoding = null;\n  }\n\n  // Ignore empty buffers, since writing them doesn't invoke the callback\n  // https://github.com/nodejs/node/issues/22066\n  if (data.length === 0) {\n    if (callback) {\n      callback();\n    }\n    return;\n  }\n  // Only write when we don't exceed the maximum body length\n  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {\n    this._requestBodyLength += data.length;\n    this._requestBodyBuffers.push({ data: data, encoding: encoding });\n    this._currentRequest.write(data, encoding, callback);\n  }\n  // Error when we exceed the maximum body length\n  else {\n    this.emit(\"error\", new MaxBodyLengthExceededError());\n    this.abort();\n  }\n};\n\n// Ends the current native request\nRedirectableRequest.prototype.end = function (data, encoding, callback) {\n  // Shift parameters if necessary\n  if (typeof data === \"function\") {\n    callback = data;\n    data = encoding = null;\n  }\n  else if (typeof encoding === \"function\") {\n    callback = encoding;\n    encoding = null;\n  }\n\n  // Write data if needed and end\n  if (!data) {\n    this._ended = this._ending = true;\n    this._currentRequest.end(null, null, callback);\n  }\n  else {\n    var self = this;\n    var currentRequest = this._currentRequest;\n    this.write(data, encoding, function () {\n      self._ended = true;\n      currentRequest.end(null, null, callback);\n    });\n    this._ending = true;\n  }\n};\n\n// Sets a header value on the current native request\nRedirectableRequest.prototype.setHeader = function (name, value) {\n  this._options.headers[name] = value;\n  this._currentRequest.setHeader(name, value);\n};\n\n// Clears a header value on the current native request\nRedirectableRequest.prototype.removeHeader = function (name) {\n  delete this._options.headers[name];\n  this._currentRequest.removeHeader(name);\n};\n\n// Global timeout for all underlying requests\nRedirectableRequest.prototype.setTimeout = function (msecs, callback) {\n  var self = this;\n  if (callback) {\n    this.on(\"timeout\", callback);\n  }\n\n  // Sets up a timer to trigger a timeout event\n  function startTimer() {\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n    }\n    self._timeout = setTimeout(function () {\n      self.emit(\"timeout\");\n      clearTimer();\n    }, msecs);\n  }\n\n  // Prevent a timeout from triggering\n  function clearTimer() {\n    clearTimeout(this._timeout);\n    if (callback) {\n      self.removeListener(\"timeout\", callback);\n    }\n    if (!this.socket) {\n      self._currentRequest.removeListener(\"socket\", startTimer);\n    }\n  }\n\n  // Start the timer when the socket is opened\n  if (this.socket) {\n    startTimer();\n  }\n  else {\n    this._currentRequest.once(\"socket\", startTimer);\n  }\n\n  this.once(\"response\", clearTimer);\n  this.once(\"error\", clearTimer);\n\n  return this;\n};\n\n// Proxy all other public ClientRequest methods\n[\n  \"flushHeaders\", \"getHeader\",\n  \"setNoDelay\", \"setSocketKeepAlive\",\n].forEach(function (method) {\n  RedirectableRequest.prototype[method] = function (a, b) {\n    return this._currentRequest[method](a, b);\n  };\n});\n\n// Proxy all public ClientRequest properties\n[\"aborted\", \"connection\", \"socket\"].forEach(function (property) {\n  Object.defineProperty(RedirectableRequest.prototype, property, {\n    get: function () { return this._currentRequest[property]; },\n  });\n});\n\nRedirectableRequest.prototype._sanitizeOptions = function (options) {\n  // Ensure headers are always present\n  if (!options.headers) {\n    options.headers = {};\n  }\n\n  // Since http.request treats host as an alias of hostname,\n  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n    delete options.host;\n  }\n\n  // Complete the URL object when necessary\n  if (!options.pathname && options.path) {\n    var searchPos = options.path.indexOf(\"?\");\n    if (searchPos < 0) {\n      options.pathname = options.path;\n    }\n    else {\n      options.pathname = options.path.substring(0, searchPos);\n      options.search = options.path.substring(searchPos);\n    }\n  }\n};\n\n\n// Executes the next native request (initial or redirect)\nRedirectableRequest.prototype._performRequest = function () {\n  // Load the native protocol\n  var protocol = this._options.protocol;\n  var nativeProtocol = this._options.nativeProtocols[protocol];\n  if (!nativeProtocol) {\n    this.emit(\"error\", new TypeError(\"Unsupported protocol \" + protocol));\n    return;\n  }\n\n  // If specified, use the agent corresponding to the protocol\n  // (HTTP and HTTPS use different types of agents)\n  if (this._options.agents) {\n    var scheme = protocol.substr(0, protocol.length - 1);\n    this._options.agent = this._options.agents[scheme];\n  }\n\n  // Create the native request\n  var request = this._currentRequest =\n        nativeProtocol.request(this._options, this._onNativeResponse);\n  this._currentUrl = url.format(this._options);\n\n  // Set up event handlers\n  request._redirectable = this;\n  for (var event in eventHandlers) {\n    /* istanbul ignore else */\n    if (event) {\n      request.on(event, eventHandlers[event]);\n    }\n  }\n\n  // End a redirected request\n  // (The first request must be ended explicitly with RedirectableRequest#end)\n  if (this._isRedirect) {\n    // Write the request entity and end.\n    var i = 0;\n    var self = this;\n    var buffers = this._requestBodyBuffers;\n    (function writeNext(error) {\n      // Only write if this request has not been redirected yet\n      /* istanbul ignore else */\n      if (request === self._currentRequest) {\n        // Report any write errors\n        /* istanbul ignore if */\n        if (error) {\n          self.emit(\"error\", error);\n        }\n        // Write the next buffer if there are still left\n        else if (i < buffers.length) {\n          var buffer = buffers[i++];\n          /* istanbul ignore else */\n          if (!request.finished) {\n            request.write(buffer.data, buffer.encoding, writeNext);\n          }\n        }\n        // End the request if `end` has been called on us\n        else if (self._ended) {\n          request.end();\n        }\n      }\n    }());\n  }\n};\n\n// Processes a response from the current native request\nRedirectableRequest.prototype._processResponse = function (response) {\n  // Store the redirected response\n  var statusCode = response.statusCode;\n  if (this._options.trackRedirects) {\n    this._redirects.push({\n      url: this._currentUrl,\n      headers: response.headers,\n      statusCode: statusCode,\n    });\n  }\n\n  // RFC7231ยง6.4: The 3xx (Redirection) class of status code indicates\n  // that further action needs to be taken by the user agent in order to\n  // fulfill the request. If a Location header field is provided,\n  // the user agent MAY automatically redirect its request to the URI\n  // referenced by the Location field value,\n  // even if the specific status code is not understood.\n  var location = response.headers.location;\n  if (location && this._options.followRedirects !== false &&\n      statusCode >= 300 && statusCode < 400) {\n    // Abort the current request\n    this._currentRequest.removeAllListeners();\n    this._currentRequest.on(\"error\", noop);\n    this._currentRequest.abort();\n    // Discard the remainder of the response to avoid waiting for data\n    response.destroy();\n\n    // RFC7231ยง6.4: A client SHOULD detect and intervene\n    // in cyclical redirections (i.e., \"infinite\" redirection loops).\n    if (++this._redirectCount > this._options.maxRedirects) {\n      this.emit(\"error\", new TooManyRedirectsError());\n      return;\n    }\n\n    // RFC7231ยง6.4: Automatic redirection needs to done with\n    // care for methods not known to be safe, [โฆ]\n    // RFC7231ยง6.4.2โ3: For historical reasons, a user agent MAY change\n    // the request method from POST to GET for the subsequent request.\n    if ((statusCode === 301 || statusCode === 302) && this._options.method === \"POST\" ||\n        // RFC7231ยง6.4.4: The 303 (See Other) status code indicates that\n        // the server is redirecting the user agent to a different resource [โฆ]\n        // A user agent can perform a retrieval request targeting that URI\n        // (a GET or HEAD request if using HTTP) [โฆ]\n        (statusCode === 303) && !/^(?:GET|HEAD)$/.test(this._options.method)) {\n      this._options.method = \"GET\";\n      // Drop a possible entity and headers related to it\n      this._requestBodyBuffers = [];\n      removeMatchingHeaders(/^content-/i, this._options.headers);\n    }\n\n    // Drop the Host header, as the redirect might lead to a different host\n    var previousHostName = removeMatchingHeaders(/^host$/i, this._options.headers) ||\n      url.parse(this._currentUrl).hostname;\n\n    // Create the redirected request\n    var redirectUrl = url.resolve(this._currentUrl, location);\n    debug(\"redirecting to\", redirectUrl);\n    this._isRedirect = true;\n    var redirectUrlParts = url.parse(redirectUrl);\n    Object.assign(this._options, redirectUrlParts);\n\n    // Drop the Authorization header if redirecting to another host\n    if (redirectUrlParts.hostname !== previousHostName) {\n      removeMatchingHeaders(/^authorization$/i, this._options.headers);\n    }\n\n    // Evaluate the beforeRedirect callback\n    if (typeof this._options.beforeRedirect === \"function\") {\n      var responseDetails = { headers: response.headers };\n      try {\n        this._options.beforeRedirect.call(null, this._options, responseDetails);\n      }\n      catch (err) {\n        this.emit(\"error\", err);\n        return;\n      }\n      this._sanitizeOptions(this._options);\n    }\n\n    // Perform the redirected request\n    try {\n      this._performRequest();\n    }\n    catch (cause) {\n      var error = new RedirectionError(\"Redirected request failed: \" + cause.message);\n      error.cause = cause;\n      this.emit(\"error\", error);\n    }\n  }\n  else {\n    // The response is not a redirect; return it as-is\n    response.responseUrl = this._currentUrl;\n    response.redirects = this._redirects;\n    this.emit(\"response\", response);\n\n    // Clean up\n    this._requestBodyBuffers = [];\n  }\n};\n\n// Wraps the key/value object of protocols with redirect functionality\nfunction wrap(protocols) {\n  // Default settings\n  var exports = {\n    maxRedirects: 21,\n    maxBodyLength: 10 * 1024 * 1024,\n  };\n\n  // Wrap each protocol\n  var nativeProtocols = {};\n  Object.keys(protocols).forEach(function (scheme) {\n    var protocol = scheme + \":\";\n    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];\n    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);\n\n    // Executes a request, following redirects\n    function request(input, options, callback) {\n      // Parse parameters\n      if (typeof input === \"string\") {\n        var urlStr = input;\n        try {\n          input = urlToOptions(new URL(urlStr));\n        }\n        catch (err) {\n          /* istanbul ignore next */\n          input = url.parse(urlStr);\n        }\n      }\n      else if (URL && (input instanceof URL)) {\n        input = urlToOptions(input);\n      }\n      else {\n        callback = options;\n        options = input;\n        input = { protocol: protocol };\n      }\n      if (typeof options === \"function\") {\n        callback = options;\n        options = null;\n      }\n\n      // Set defaults\n      options = Object.assign({\n        maxRedirects: exports.maxRedirects,\n        maxBodyLength: exports.maxBodyLength,\n      }, input, options);\n      options.nativeProtocols = nativeProtocols;\n\n      assert.equal(options.protocol, protocol, \"protocol mismatch\");\n      debug(\"options\", options);\n      return new RedirectableRequest(options, callback);\n    }\n\n    // Executes a GET request, following redirects\n    function get(input, options, callback) {\n      var wrappedRequest = wrappedProtocol.request(input, options, callback);\n      wrappedRequest.end();\n      return wrappedRequest;\n    }\n\n    // Expose the properties on the wrapped protocol\n    Object.defineProperties(wrappedProtocol, {\n      request: { value: request, configurable: true, enumerable: true, writable: true },\n      get: { value: get, configurable: true, enumerable: true, writable: true },\n    });\n  });\n  return exports;\n}\n\n/* istanbul ignore next */\nfunction noop() { /* empty */ }\n\n// from https://github.com/nodejs/node/blob/master/lib/internal/url.js\nfunction urlToOptions(urlObject) {\n  var options = {\n    protocol: urlObject.protocol,\n    hostname: urlObject.hostname.startsWith(\"[\") ?\n      /* istanbul ignore next */\n      urlObject.hostname.slice(1, -1) :\n      urlObject.hostname,\n    hash: urlObject.hash,\n    search: urlObject.search,\n    pathname: urlObject.pathname,\n    path: urlObject.pathname + urlObject.search,\n    href: urlObject.href,\n  };\n  if (urlObject.port !== \"\") {\n    options.port = Number(urlObject.port);\n  }\n  return options;\n}\n\nfunction removeMatchingHeaders(regex, headers) {\n  var lastValue;\n  for (var header in headers) {\n    if (regex.test(header)) {\n      lastValue = headers[header];\n      delete headers[header];\n    }\n  }\n  return lastValue;\n}\n\nfunction createErrorType(code, defaultMessage) {\n  function CustomError(message) {\n    Error.captureStackTrace(this, this.constructor);\n    this.message = message || defaultMessage;\n  }\n  CustomError.prototype = new Error();\n  CustomError.prototype.constructor = CustomError;\n  CustomError.prototype.name = \"Error [\" + code + \"]\";\n  CustomError.prototype.code = code;\n  return CustomError;\n}\n\n// Exports\nmodule.exports = wrap({ http: http, https: https });\nmodule.exports.wrap = wrap;\n"]},"metadata":{},"sourceType":"script"}